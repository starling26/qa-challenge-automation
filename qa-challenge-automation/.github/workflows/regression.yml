name: 🔄 Regression Testing Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      regression_scope:
        description: 'Alcance de testing de regresión'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - smoke
          - critical
          - recent

env:
  BASE_URL: https://parabank.parasoft.com/parabank

jobs:
  regression-matrix:
    name: 🔄 Regression Testing
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        browser: [chromium, firefox, webkit]
        include:
          # Mobile testing
          - os: ubuntu-latest
            browser: mobile-chrome
          - os: ubuntu-latest
            browser: mobile-safari
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Obtener historial completo para análisis

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: 📁 Create regression directories
        run: |
          mkdir -p regression-results
          mkdir -p regression-screenshots
          mkdir -p regression-evidence

      - name: 🔍 Analyze changes (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          echo "🔍 Analyzing changes for regression scope..."
          
          # Obtener archivos cambiados
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
          else
            changed_files=$(git diff --name-only HEAD~1 HEAD)
          fi
          
          echo "Changed files:"
          echo "$changed_files"
          
          # Determinar scope basado en cambios
          scope="${{ github.event.inputs.regression_scope || 'full' }}"
          
          if echo "$changed_files" | grep -q "tests/"; then
            echo "TEST_CHANGES=true" >> $GITHUB_ENV
          fi
          
          if echo "$changed_files" | grep -q "playwright.config"; then
            echo "CONFIG_CHANGES=true" >> $GITHUB_ENV
          fi
          
          echo "REGRESSION_SCOPE=$scope" >> $GITHUB_ENV
          echo "$changed_files" > regression-results/changed-files.txt

      - name: 🔍 Analyze changes (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "🔍 Analyzing changes for regression scope..."
          $scope = "${{ github.event.inputs.regression_scope }}"
          if (-not $scope) { $scope = "full" }
          echo "REGRESSION_SCOPE=$scope" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

      - name: 🚀 Run Regression Tests - Smoke
        if: github.event.inputs.regression_scope == 'smoke'
        run: |
          echo "💨 Running SMOKE regression tests"
          npx playwright test \
            --project=${{ matrix.browser }} \
            --grep="TC01|TC02|TC03" \
            --reporter=html,json \
            --output-dir=regression-results/smoke
        continue-on-error: true

      - name: 🚀 Run Regression Tests - Critical
        if: github.event.inputs.regression_scope == 'critical'
        run: |
          echo "🚨 Running CRITICAL regression tests"
          npx playwright test \
            --project=${{ matrix.browser }} \
            --grep="TC01|TC02|TC03|TC04|TC05|TC_AUTO_013|TC_AUTO_014" \
            --reporter=html,json \
            --output-dir=regression-results/critical
        continue-on-error: true

      - name: 🚀 Run Regression Tests - Recent
        if: github.event.inputs.regression_scope == 'recent'
        run: |
          echo "🆕 Running RECENT regression tests"
          npx playwright test \
            --project=${{ matrix.browser }} \
            --grep="TC_AUTO_" \
            --reporter=html,json \
            --output-dir=regression-results/recent
        continue-on-error: true

      - name: 🚀 Run Regression Tests - Full
        if: github.event.inputs.regression_scope == 'full' || github.event.inputs.regression_scope == ''
        run: |
          echo "🔄 Running FULL regression test suite"
          npx playwright test \
            --project=${{ matrix.browser }} \
            --reporter=html,json \
            --output-dir=regression-results/full
        continue-on-error: true

      - name: 📊 Generate Regression Report
        run: |
          echo "# 🔄 Regression Test Report" > regression-report-${{ matrix.os }}-${{ matrix.browser }}.md
          echo "" >> regression-report-${{ matrix.os }}-${{ matrix.browser }}.md
          echo "**Platform**: ${{ matrix.os }}" >> regression-report-${{ matrix.os }}-${{ matrix.browser }}.md
          echo "**Browser**: ${{ matrix.browser }}" >> regression-report-${{ matrix.os }}-${{ matrix.browser }}.md
          echo "**Scope**: ${{ github.event.inputs.regression_scope || 'full' }}" >> regression-report-${{ matrix.os }}-${{ matrix.browser }}.md
          echo "**Date**: $(date)" >> regression-report-${{ matrix.os }}-${{ matrix.browser }}.md
          echo "**Commit**: ${{ github.sha }}" >> regression-report-${{ matrix.os }}-${{ matrix.browser }}.md
          echo "" >> regression-report-${{ matrix.os }}-${{ matrix.browser }}.md
          
          if [ -f "regression-results/changed-files.txt" ]; then
            echo "## 📝 Changed Files" >> regression-report-${{ matrix.os }}-${{ matrix.browser }}.md
            echo "\`\`\`" >> regression-report-${{ matrix.os }}-${{ matrix.browser }}.md
            cat regression-results/changed-files.txt >> regression-report-${{ matrix.os }}-${{ matrix.browser }}.md
            echo "\`\`\`" >> regression-report-${{ matrix.os }}-${{ matrix.browser }}.md
            echo "" >> regression-report-${{ matrix.os }}-${{ matrix.browser }}.md
          fi
          
          echo "## 🎯 Test Execution Status" >> regression-report-${{ matrix.os }}-${{ matrix.browser }}.md
          
          # Verificar si hay resultados
          if [ -d "test-results" ]; then
            passed_tests=$(find test-results -name "*.xml" -exec grep -l "failures=\"0\"" {} \; | wc -l)
            failed_tests=$(find test-results -name "*.xml" -exec grep -l "failures=\"[1-9]" {} \; | wc -l)
            
            echo "- ✅ **Passed**: $passed_tests" >> regression-report-${{ matrix.os }}-${{ matrix.browser }}.md
            echo "- ❌ **Failed**: $failed_tests" >> regression-report-${{ matrix.os }}-${{ matrix.browser }}.md
          else
            echo "- ⚠️ **Status**: No test results found" >> regression-report-${{ matrix.os }}-${{ matrix.browser }}.md
          fi
          
          echo "" >> regression-report-${{ matrix.os }}-${{ matrix.browser }}.md
          echo "## 📊 Environment Info" >> regression-report-${{ matrix.os }}-${{ matrix.browser }}.md
          echo "- **OS**: ${{ matrix.os }}" >> regression-report-${{ matrix.os }}-${{ matrix.browser }}.md
          echo "- **Browser**: ${{ matrix.browser }}" >> regression-report-${{ matrix.os }}-${{ matrix.browser }}.md
          echo "- **Node Version**: $(node --version)" >> regression-report-${{ matrix.os }}-${{ matrix.browser }}.md
          echo "- **Playwright Version**: $(npx playwright --version)" >> regression-report-${{ matrix.os }}-${{ matrix.browser }}.md

      - name: 📸 Capture failure screenshots
        if: failure()
        run: |
          echo "📸 Capturing failure evidence..."
          
          # Buscar y copiar screenshots de failures
          if [ -d "test-results" ]; then
            find test-results -name "*.png" -exec cp {} regression-evidence/ \;
            find test-results -name "*.webm" -exec cp {} regression-evidence/ \;
          fi
          
          echo "Evidence captured in regression-evidence/"
          ls -la regression-evidence/ || echo "No evidence files found"

      - name: 📊 Upload regression results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: regression-results-${{ matrix.os }}-${{ matrix.browser }}
          path: |
            regression-results/
            regression-evidence/
            regression-report-${{ matrix.os }}-${{ matrix.browser }}.md
            test-results/
            playwright-report/
          retention-days: 30

  regression-summary:
    name: 📋 Regression Summary
    runs-on: ubuntu-latest
    needs: regression-matrix
    if: always()
    outputs:
      success_rate: ${{ steps.generate_summary.outputs.success_rate }}
      overall_status: ${{ steps.generate_summary.outputs.overall_status }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📥 Download all regression results
        uses: actions/download-artifact@v4
        with:
          path: ./all-regression-results

      - name: 📊 Generate Master Regression Report
        id: generate_summary
        run: |
          echo "# 🔄 Master Regression Report" > master-regression-report.md
          echo "" >> master-regression-report.md
          echo "**Generated**: $(date)" >> master-regression-report.md
          echo "**Workflow Run**: [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> master-regression-report.md
          echo "**Scope**: ${{ github.event.inputs.regression_scope || 'full' }}" >> master-regression-report.md
          echo "**Trigger**: ${{ github.event_name }}" >> master-regression-report.md
          echo "" >> master-regression-report.md
          
          echo "## 🎯 Execution Summary" >> master-regression-report.md
          echo "" >> master-regression-report.md
          echo "| Platform | Browser | Status | Details |" >> master-regression-report.md
          echo "|----------|---------|--------|---------|" >> master-regression-report.md
          
          total_combinations=0
          successful_combinations=0
          
          for result_dir in ./all-regression-results/regression-results-*; do
            if [ -d "$result_dir" ]; then
              total_combinations=$((total_combinations + 1))
              
              # Extraer plataforma y browser del nombre del directorio
              basename_dir=$(basename "$result_dir")
              platform=$(echo "$basename_dir" | sed 's/regression-results-\([^-]*\)-\(.*\)/\1/')
              browser=$(echo "$basename_dir" | sed 's/regression-results-\([^-]*\)-\(.*\)/\2/')
              
              # Verificar si hay evidencia de fallo
              if [ -d "$result_dir/regression-evidence" ] && [ "$(ls -A "$result_dir/regression-evidence")" ]; then
                status="❌ Failed"
                details="[Evidence](./$basename_dir/regression-evidence/)"
              else
                status="✅ Passed"
                successful_combinations=$((successful_combinations + 1))
                details="[Report](./$basename_dir/)"
              fi
              
              echo "| $platform | $browser | $status | $details |" >> master-regression-report.md
            fi
          done
          
          success_rate=0
          if [ "$total_combinations" -gt 0 ]; then
            success_rate=$(echo "scale=1; ($successful_combinations * 100) / $total_combinations" | bc)
          fi
          
          echo "" >> master-regression-report.md
          echo "## 📊 Overall Statistics" >> master-regression-report.md
          echo "- **Total Combinations**: $total_combinations" >> master-regression-report.md
          echo "- **Successful**: $successful_combinations" >> master-regression-report.md
          echo "- **Failed**: $((total_combinations - successful_combinations))" >> master-regression-report.md
          echo "- **Success Rate**: ${success_rate}%" >> master-regression-report.md
          echo "" >> master-regression-report.md
          
          # Determinar el resultado general
          if [ "$success_rate" = "100.0" ]; then
            overall_status="🎉 ALL PASSED"
            badge_color="brightgreen"
          elif [ "$(echo "$success_rate >= 80" | bc)" = "1" ]; then
            overall_status="⚠️ MOSTLY PASSED"
            badge_color="yellow"
          else
            overall_status="❌ MULTIPLE FAILURES"
            badge_color="red"
          fi
          
          echo "## 🏆 Overall Result: $overall_status" >> master-regression-report.md
          echo "" >> master-regression-report.md
          
          echo "## 🔗 Detailed Reports" >> master-regression-report.md
          echo "All individual reports and evidence are available in the artifacts:" >> master-regression-report.md
          echo "" >> master-regression-report.md
          
          for result_dir in ./all-regression-results/regression-results-*; do
            if [ -d "$result_dir" ]; then
              basename_dir=$(basename "$result_dir")
              echo "- [$basename_dir](./$basename_dir/)" >> master-regression-report.md
            fi
          done
          
          # Crear badge data y outputs
          echo "Regression-${success_rate}%-${badge_color}" > regression-badge.txt
          echo "success_rate=$success_rate" >> $GITHUB_OUTPUT
          echo "overall_status=$overall_status" >> $GITHUB_OUTPUT

      - name: 📊 Upload master regression report
        uses: actions/upload-artifact@v4
        with:
          name: master-regression-report
          path: |
            master-regression-report.md
            regression-badge.txt
          retention-days: 90

      - name: 💬 Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reportContent = fs.readFileSync('master-regression-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔄 Regression Test Results\n\n${reportContent}`
            });

  check-regression-results:
    name: ✅ Check Regression Results
    runs-on: ubuntu-latest
    needs: regression-summary
    if: always()
    steps:
      - name: ❌ Fail workflow if regression failed
        if: contains(needs.regression-summary.outputs.overall_status, 'FAILURES')
        run: |
          echo "❌ Regression testing failed!"
          echo "Overall status: ${{ needs.regression-summary.outputs.overall_status }}"
          echo "Success rate: ${{ needs.regression-summary.outputs.success_rate }}%"
          exit 1
          
      - name: ✅ Regression tests passed
        if: contains(needs.regression-summary.outputs.overall_status, 'PASSED')
        run: |
          echo "✅ All regression tests passed!"
          echo "Overall status: ${{ needs.regression-summary.outputs.overall_status }}"
          echo "Success rate: ${{ needs.regression-summary.outputs.success_rate }}%"
